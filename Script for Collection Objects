import bpy


KEYFRAME_LOCATION = True
KEYFRAME_ROTATION = True
KEYFRAME_SCALE = True
KEYFRAME_VISIBILITY = False
KEYFRAME_VISIBILITY_SCALE = True



def create_objects_for_particles(ps, ps_name, particles_coll):

    #deselect particle source
    bpy.data.objects[ps_name].select_set(False)

    # store a ref for every object to match every particle
    obj_list = []

    #loop through particles to make a copy for each
    for i, _ in enumerate(ps.particles):

        #duplicate objects
        dupli = bpy.ops.object.duplicate()

        #select the recent duplicate objects
        activeObjects = bpy.context.selected_objects

        #loop through the objects
        for ob in activeObjects: 

            #get current parent collection   
            currColl = ob.users_collection[0]
            #unlink from that
            currColl.objects.unlink(ob)
            #add to newly created collection
            particles_coll.objects.link(ob)

            #pull out the armature to add to obj_list for animation
            if ob.type == 'MESH':

                #add the new object to the list
                obj_list.append(ob)

    return obj_list

def match_and_keyframe_objects(ps, obj_list, start_frame, end_frame):

    for frame in range(start_frame, end_frame + 1):
        print("frame {} processed".format(frame))
        bpy.context.scene.frame_set(frame)
        for p, obj in zip(ps.particles, obj_list):
            match_object_to_particle(p, obj)
            keyframe_obj(obj)

def match_object_to_particle(p, obj):

    loc = p.location
    rot = p.rotation
    size = p.size
    if p.alive_state == 'ALIVE':
        vis = True
    else:
        vis = False
    obj.location = loc
 
    obj.rotation_mode = 'QUATERNION'
    obj.rotation_quaternion = rot
    if KEYFRAME_VISIBILITY_SCALE:
        if vis:
            obj.scale = (size, size, size)
        if not vis:
            obj.scale = (0.001, 0.001, 0.001)
    obj.hide_viewport = (vis)
    obj.hide_render = (vis)

def keyframe_obj(obj):

    if KEYFRAME_LOCATION:
        obj.keyframe_insert("location")
    if KEYFRAME_ROTATION:
        obj.keyframe_insert("rotation_quaternion")
    if KEYFRAME_SCALE:
        obj.keyframe_insert("scale")
    if KEYFRAME_VISIBILITY:
        obj.keyframe_insert("hide_viewport")
        obj.keyframe_insert("hide_render")


def main():
    
#set frame to 0 in case it isn't
    bpy.context.scene.frame_set(0)

    #in 2.8 you need to evaluate the Dependency graph in order to get data from animation, modifiers, etc
    depsgraph = bpy.context.evaluated_depsgraph_get()

    # The last object should be the one with the particle system.
    ps_obj = bpy.context.object
    ps_obj_evaluated = depsgraph.objects[ ps_obj.name ]
    ps_name = ps_obj.name

    ps = ps_obj_evaluated.particle_systems[0]  # Assume only 1 particle system is present.
    start_frame = bpy.context.scene.frame_start
    end_frame = bpy.context.scene.frame_end

    #create a new empty collection to store duplicates
    #do here so can pass to rename_bones
    particles_coll = bpy.data.collections.new(name="particle_copies")
    bpy.context.scene.collection.children.link(particles_coll)

    obj_list = create_objects_for_particles(ps, ps_name, particles_coll)

    match_and_keyframe_objects(ps, obj_list, start_frame, end_frame)   

        
if __name__ == '__main__':
    main()
